import { Ctx, Hears, InjectBot, Message, On, Start, Update } from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { actionButtons } from './app.buttons';
import { AppService } from './app.service';
import { showList } from './app.utils';
import { Context } from './context.interface';

@Update()
export class AppUpdate {
	constructor(@InjectBot() private readonly bot: Telegraf<Context>, private readonly appService: AppService) { }

	@Start()
	async startCommand(ctx: Context) {
		await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');

		await ctx.reply('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', actionButtons());
	}

	@Hears('‚úè –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É')
	async createTask(ctx: Context) {
		ctx.session.type = 'create';
		await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ");
		ctx.deleteMessage()
	}

	@Hears('üìî –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á')
	async listTask(ctx: Context) {
		const todos = await this.appService.getAll();
		ctx.deleteMessage()
		await ctx.reply(showList(todos));
	}

	@Hears('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å')
	async doneTask(ctx: Context) {
		ctx.session.type = 'done';
		await ctx.deleteMessage()
		await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å:');
	}

	@Hears('üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
	async editTask(ctx: Context) {
		ctx.session.type = 'edit';
		await ctx.deleteMessage()
		await ctx.replyWithHTML('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:\n(–§–æ—Ä–º–∞—Ç: <b>1 | –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)</b>');
	}

	@Hears('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ')
	async deleteTask(ctx: Context) {
		ctx.session.type = 'remove';
		ctx.deleteMessage()
		await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å:');
	}

	@On('text')
	async getMessage(@Message("text") message: string, @Ctx() ctx: Context) {
		if (!ctx.session.type) return

		if (ctx.session.type === "create") {
			const todos = await this.appService.createTask(message);

			await ctx.reply(showList(todos));
		}

		if (ctx.session.type === "done") {
			const todos = await this.appService.doneTask(+message);

			if (!todos) {
				await ctx.reply('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
				return;
			}

			await ctx.reply(showList(todos));
		}

		if (ctx.session.type === "edit") {
			const [taskId, taskName] = message.split('|').map((t) => t.trim());

			const todos = await this.appService.editTask(+taskId, taskName);

			if (!todos) {
				await ctx.deleteMessage()
				await ctx.reply('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
				return;
			}

			await ctx.reply(showList(todos));
		}

		if (ctx.session.type === "remove") {
			const todos = await this.appService.deleteTask(+message);

			if (!todos) {
				await ctx.reply('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
				return;
			}

			await ctx.reply(showList(todos));
		}
	}
}
